@using System
@using Stasis.Data
@using Sandbox.UI
@namespace Stasis.UI
@inherits PanelComponent

<root>
    <div class="panel">
        <div class="left">

        <div class="score" >
            <div class="timer">
                <div class="time"> @Time</div>
                <div class="mil"> @TimeMil</div>
                <div class="dif @(timesave ? "green":"red")"> @TimeDif</div>
            </div>
            <div class="trophy">
                <div class="times">
                    <div class="gold @(medal == 3 ? "active" : "")" >@Gold</div>
                    <div class="silver @(medal == 2 || medal == -1 ? "active" : "")">@Silver</div>
                    <div class="bronze @(medal == 1 ? "active" : "")">@Bronze</div>
                    </div>
                    <div class="img">
                        @if(medal != 0)
                        {
                            <img src=@("img/medal" + @medal + ".png")>
                        } else if(medal == -1)
                        {
                            
                            <img src=@("img/medal3.png")>
                        }
                    </div>
                </div>
            </div>
            <div class="name">@Name</div>
        </div>
        <div class="right">
            <div class="up">
                <div class="author">By: @Author</div>
                <div class="exit" onclick="@(x => { GameObject.Enabled = false;} )">
                    <p>X</p>
                </div>

            </div>
            <div class="down">
                @for (int i = 0; i < Scores.Count; i++)
                {
                    var time = Sng.Inst.FormatTime(Scores[i].Time);
                    <div class="list-item @((Scores.Count - i) % 2 == 0 ? "dark":"")">
                        <div class="count">@(i + 1).</div>
                        <div class="time">@(time)</div>
                    </div>
                }
            </div>
        </div>


    </div>
</root>

@code
{
    public bool timesave { get; set; }
    public int medal { get; set; }
    public string Time { get; set; }
    public string Gold { get; set; }
    public string Silver { get; set; }
    public string Bronze { get; set; }
    public string Author { get; set; }
    public string Name { get; set; }
    public string TimeDif { get; set; }
    public string TimeMil { get; set; }
    public List<Score> Scores { get; set; } = new List<Score>();
   /*
    protected override void OnAwake()
    {
        base.OnAwake();
        medal = 2;
        Time = "11:00:00";
        Gold = "0.25.000";
        Silver = "0.25.000";
        Bronze = "11:00:25.000";
        TimeDif = "-11:01:54.335";
        TimeMil = ".414";
        Author = "Daiter Andrew Brown";
        Name = "PLAYGROUND_EXTENDED";
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
        Scores.Add(new Score(1.50f,DateTime.Now));
    }
    */ 

     
    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine( Time );
}
