@using Sandbox;
@using Stasis.Data
@using Sandbox.UI
@using Stasis.UI
@using Sandbox.Razor
@inherits PanelComponent

<root class="root" >
    @if(MENUC.ReplayUIVisible)
    {
        <div class="display" onmousedown="@((x) => {
        if (FREECAM.Enabled) {
            GameObject.Enabled = false;
        }})">
            @if (FREECAM.Enabled)
            {
                <div class="info">Click to move camera</div>
            }
        </div>
        <div class="panel">
            <div class="up">

                <div class="controls">
                    <img class="prev" onclick="@((x)=>{TickRelay--;})" src="img/skip_previous.png" />
                    @if (VIEW.IsPlaying)
                    {
                        <img class="resume" onclick="@((x) => {VIEW.PauseView(true);})" src="img/pause.png" />
                    }
                    else
                    {
                        <img class="play" onclick="@((x)=>{VIEW.PauseView(false);})" src="img/play.png" />
                    }
                    <img class="next" onclick="@((x)=>{TickRelay++;})" src="img/skip_next.png" />
                    <div class="speed">
                        <SliderControl Min=@(-3f) Max=@(10f) Step=@(0.1f) Value:bind=@VIEW.ReplaySpeed />
                    </div>
                </div>
                <img class="upload" onclick="@((x) => { EnableImport();})" src="img/upload.png" />
                <div class="label">Tick: @(tickRelay)</div>
                <img class="goback" onclick="@((x) => {GoBack();})" src="img/back.png" />
            </div>
            <div class="control-wrap">
                <div class="control">
                    <SliderControl Min=@(0) Max=@VIEW.Replay.Ticks.Count Step=@(1) Value:bind=@TickRelay />
                </div>
            </div>
        </div>
    }
</root>

@code
{
    ViewReplay VIEW;
    MenuController MENUC;
    Sng SNG;
    GameObject FREECAM;
    ImportReplay IMPORT;
    int tickRelay;

    public void EnableImport(){
        IMPORT.GameObject.Enabled = !IMPORT.GameObject.Enabled;
    }

    public int TickRelay
    {
        get { return tickRelay; }
        set
        {
            if (VIEW != null && value != (int)VIEW.CurrentTick)
            {
                VIEW.JumpToTick(value);
                VIEW.PauseView();
            }
            tickRelay = value;
        }
    }
    public void GoBack()
    {
        tickRelay = 0;
        if( VIEW.CallbackUI.Name == "Choose menu" )
        {
            SNG.ChangeGameState(GameState.MainMenu);
            MENUC.MenuUI.GameObject.Enabled = false;
            //MENUC.ChooseUI.GameObject.Enabled = true;
        }
        else
        {
            SNG.ChangeGameState(GameState.Play);
        }

        VIEW.CallbackUI.Enabled = true;
        GameObject.Enabled = false;
    }
    protected override void OnAwake()
    {
        SNG = Sng.Inst;
        MENUC = SNG.MenuC;
        VIEW = SNG.ViewC;
        FREECAM = SNG.Player.CameraC.FreeCam.GameObject;
        IMPORT = MENUC.ImportUI;
    }

    protected override int BuildHash() => System.HashCode.Combine(MENUC.ReplayUIVisible,GameObject.Enabled, VIEW.OldestTick, tickRelay, VIEW.CurrentTick, FREECAM.Enabled);
}
